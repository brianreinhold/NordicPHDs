
Obtain the necessary Development Kit, either the nRF51 DK or nRF52 DK
It is assumed you have either the SES or Keil compilers installed and know how to use them.

Download the appropriate Nordic SDK:  https://www.nordicsemi.com/Products/Development-software/nRF5-SDK/Download#infotabs
    12.3.0 is the latest version that can be used with the nRF51 code.
    17.1.0 and 17.0.2 can be used with the nFR52 code. Earlier versions might require some minor changes.
    Nordic is not making any more new releases after 17; just bug fixes.
    Note that the Bluetooth uses SoftDevice and not the SDK so porting to other versions of the SDK (SoftDevice) is probably quite easy.

Copy the modules in the respective NRF5n directories into the %NRFSDK%/examples/ble_periferal/ directories.

Select a Specialization to support:

In the handleSpecializations.h file select which device specialization to support (Below the weight scale is being supported):

#define BP_CUFF 0
#define PULSE_OX 0
#define GLUCOSE 0           // Be sure USES_STORED_DATA and USES_TIMESTAMP are set to 1 or nothing will happen
#define HEART_RATE 0        // USES_STORED_DATA can be set to 0 since this implementation does not support stored data
#define SPIROMETER 0        // USES_STORED_DATA can be set to 0 since this implementation does not support stored data
#define SCALE 1
#define THERMOMETER 0

If using Keil, be sure that Flash/Configure Flash Tools/Debug/ that J-LINK / J-TRACE Cortex is selected in the drop down box to the far right. 
It may be set to a ULINK option out of the box.
               Clicking on the Settings button to the left of this input box should show the Port box set to 'SW'
Be sure Flash/Configure Flash Tools/Utilities/(press Settings button) Reset and Run is checked. If not, you will need to press the BOOT/RESET button
after a flash/download before the program will run.

On the nRF51 platform, be sure to set the STACK SIZE and HEAP_SIZE to 4096. It can be done by setting a preprocessor Macro or directly in the
assembly code 'arm_startup_nrf51.s' under Device in the Project window. The GHS requires more memory and resources than the MET for a given 
specialization and has a larger code size.

Depending upon the version of the SES compiler you have, you may need to either remove (later versions) or keep (earlier versions) the 
file SEGGER_RTT_Syscalls_SES.c.

When flashing a build from SES, there is a bug where you have to press the boot/reset button before the program will work. This bug is
known and Segger is not going to address it.

You do NOT need to do this once installed and/or after a power cycle.

Once the program is installed onto the DK:

Button 4 creates a measurement that is stored if you allow stored data. Pressing this button has to be done before starting advertisements.
Button 3 starts advertising
Button 2 disconnects if connected, deletes pairing and flash data if not connected

For each of the specialization there is also the option to
turn off/on pairing
turn on/off use of time stamps
turn on/off use of stored data
use different types of time clocks - relative time or epoch time
use different time resolutions (seconds, tenths, hundredths, milliseconds)

